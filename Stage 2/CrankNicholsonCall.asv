function [price, vetS, matval] = CrankNicholsonCall(S0,K,r,T,sigma,Smax,dS,dt)
% set up grid and adjust increments if necessary
M = round(Smax/dS);
dS = Smax/M;
N = round(T/dt);
dt = T/N;
matval = zeros(M+1,N+1);
vetS = linspace(0,Smax,M+1)';
veti = 0:M;
vetj = 0:N;
% set up boundary conditions
matval(:,N+1) = max(vetS-K,0);
matval(1,:) = 0 ;
%matval(M+1,:) = Smax-K*exp(-r * (T-dt));
matval(M+1,:) = (Smax-K)*exp(-r * dt * (N-vetj));
% set up the coefficients matrix
alpha = 0.25*dt*(sigma^2*(veti.^2) - r*veti);
beta = -dt*0.5*(sigma^2*(veti.^2) + r);
gamma = 0.25*dt*(sigma^2*(veti.^2) + r*veti);
M1 = -diag(alpha(3:M) ,-1) + diag(1-beta(2:M)) - diag(gamma(2:M-1) ,1) ;
[L,U] = lu(M1);
M2 = diag(alpha(3:M) ,-1) + diag(1+beta(2:M)) + diag(gamma(2:M-1) ,1);
%solve the sequence of linear systems
lostval = zeros(size(M2,2), 1);
for j=N:-1:1
    if length(lostval)==1
        lostval(1) = alpha(2) * (matval(1,j)+matval(1,j+1));
        lostval(end) = gamma(end) * (matval(end,j)+matval(end,j+1));
    else
        lostval = lostval(1)+lostval(end);
    end

    matval(2:M,j) = U \ (L \ (M2*(matval(2:M,j+1)+lostval)));
end

%return price, possibly by linear interpolation outside the grid
price = interp1(vetS, matval(:,1), S0)
