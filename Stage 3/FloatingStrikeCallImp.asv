% function [price, vetS, matval] = FloatingStrikeCallImp(S0,Min,r,T,sigma,Smax,dS,dt)
% % set up grid and adjust increments if necessary
% Sz = S0/Min;
% z = Smax/Min;
% M = round((z)/dS);
% dS = (z)/M;
% N = round(T/dt);
% dt = T/N;
% matval = zeros(M+1,N+1);
% vetz = linspace(0,z,M+1)';
% veti = 0:M;
% vetj = 0:N;
% % set up boundary conditions
% matval(:,N+1) = vetz;
% matval(1,:) = 0;
% matval(M+1,:) = max(z-1, 0);
% % set up the tridiagonal coefficients matrix
% a = 0.5*(r*dt*veti-sigma^2*dt*(veti.^2));
% b = 1+sigma^2*dt*(veti.^2)+r*dt;
% c = -0.5*(r*dt*veti+sigma^2*dt*(veti.^2));
% coeff = diag(a(3:M),-1) + diag(b(2:M)) + diag(c(2:M-1),1);
% [L,U] = lu(coeff);
% % solve the sequence of linear systems
% aux = zeros(M-1,1);
% for j=N:-1:1
%    aux(M-1) = - c(M) * matval(M+1,j);
%    matval(2:M,j) = U \ (L \ (matval(2:M,j+1) + aux));
% end
% % return price, possibly by linear interpolation outside the grid
% price = Min*interp1(vetz, matval(:,1), Sz);
% matval;


function [price, vetS, matval] = FloatingStrikeCallImp(S0,Min,r,T,sigma,Smax,dS,dt)
% set up grid and adjust increments if necessary
z = Smax/Min
M = round(z/dS);
dS = z/M;
N = round(T/dt);
dt = T/N;
matval = zeros(M+1,N+1);
vetz = linspace(0,z,M+1)'; % Create a column vector (vetS) containing M+1 equally spaced asset prices from 0 to Smax.
veti = 0:M;
vetj = 0:N;
% set up boundary conditions
matval(:,N+1) = max(vetz-1,0);
matval(1,:) = 0;
matval(M+1,:) = (Smax)-Min*exp(-r * dt * (N-vetj));
% set up the coefficients matrix
alpha = 0.25*dt*(sigma^2*(veti.^2) - r*veti);
beta = -dt*0.5*(sigma^2*(veti.^2) + r);
gamma = 0.25*dt*(sigma^2*(veti.^2) + r*veti);
M1 = -diag(alpha(3:M) ,-1) + diag(1-beta(2:M)) - diag(gamma(2:M-1) ,1) ;
[L,U] = lu(M1);
M2 = diag(alpha(3:M) ,-1) + diag(1+beta(2:M)) + diag(gamma(2:M-1) ,1);
%solve the sequence of linear systems
aux = zeros(size(M2,2), 1);
for j=N:-1:1
    if length(aux)>1
        aux(1) = alpha(2) * (matval(1,j)+matval(1,j+1));
        aux(end) = gamma(end) * (matval(end,j)+matval(end,j+1));
    else
        aux = aux(1)+aux(end);
    end

    matval(2:M,j) = U \ (L \ ((M2*(matval(2:M,j+1))+aux)));
end

%return price, possibly by linear interpolation outside the grid
price = interp1(vetS, matval(:,1), S0);
